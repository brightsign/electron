From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Tariq Bashir <tbashir@brightsign.biz>
Date: Wed, 15 Mar 2023 11:37:56 +0000
Subject: OS-15118: add bs set z order custom feature to wayland

A custom feature has been added to BrightSign Weston server to enable
a z-index to be set to top level xdg windows.
This patch adds the functionality into third_party/wayland and
chromium ui/ozone/platform/wayland.

diff --git a/third_party/wayland/BUILD.gn b/third_party/wayland/BUILD.gn
index 0e0cb4846633d76fe4b74b7061ed274b330a8b46..76ab248cb72813c2aabea14b567b5a2d9e780350 100644
--- a/third_party/wayland/BUILD.gn
+++ b/third_party/wayland/BUILD.gn
@@ -9,7 +9,7 @@ import("//tools/generate_stubs/rules.gni")
 assert(is_linux || is_chromeos)
 
 wayland_protocol("wayland_protocol_c") {
-  sources = [ "src/protocol/wayland.xml" ]
+  sources = [ "src/protocol/wayland.xml", "src/protocol/bs-z-order-unstable-v1.xml" ]
   generator_type = "protocol-marshalling"
 }
 
@@ -41,7 +41,7 @@ wayland_protocol("wayland_server_protocol") {
 }
 
 wayland_protocol("wayland_client_protocol") {
-  sources = [ "src/protocol/wayland.xml" ]
+  sources = [ "src/protocol/wayland.xml", "src/protocol/bs-z-order-unstable-v1.xml" ]
   generator_type = "protocol-client"
 }
 
diff --git a/third_party/wayland/src/protocol/bs-z-order-unstable-v1.xml b/third_party/wayland/src/protocol/bs-z-order-unstable-v1.xml
new file mode 100644
index 0000000000000000000000000000000000000000..da7ae7a6e20242d1593d5cfcc4bb41ba16f2e775
--- /dev/null
+++ b/third_party/wayland/src/protocol/bs-z-order-unstable-v1.xml
@@ -0,0 +1,14 @@
+<protocol name="bs_z_order">
+
+  <interface name="bs_z_order_v1" version="1">
+    <request name="set_z_index">
+      <arg name="surface" type="object" interface="wl_surface" />
+      <arg name="z_index" type="int" />
+    </request>
+    <request name="set_background_color">
+      <arg name="output" type="object" interface="wl_output" />
+      <arg name="background_color" type="uint" />
+    </request>
+  </interface>
+
+</protocol>
diff --git a/ui/ozone/platform/wayland/common/wayland_object.cc b/ui/ozone/platform/wayland/common/wayland_object.cc
index 54edc6a9103911120c8dda7de0afc9960ed87206..4d08be815afcd4372ef7e7768af8b47f8ca1dad1 100644
--- a/ui/ozone/platform/wayland/common/wayland_object.cc
+++ b/ui/ozone/platform/wayland/common/wayland_object.cc
@@ -184,6 +184,7 @@ void (*ObjectTraits<wl_proxy>::deleter)(void*) = &wl_proxy_wrapper_destroy;
 // For convenience, keep aphabetical order in this list.
 IMPLEMENT_WAYLAND_OBJECT_TRAITS(augmented_surface)
 IMPLEMENT_WAYLAND_OBJECT_TRAITS(augmented_sub_surface)
+IMPLEMENT_WAYLAND_OBJECT_TRAITS(bs_z_order_v1)
 IMPLEMENT_WAYLAND_OBJECT_TRAITS(gtk_primary_selection_device)
 IMPLEMENT_WAYLAND_OBJECT_TRAITS(gtk_primary_selection_device_manager)
 IMPLEMENT_WAYLAND_OBJECT_TRAITS(gtk_primary_selection_offer)
diff --git a/ui/ozone/platform/wayland/common/wayland_object.h b/ui/ozone/platform/wayland/common/wayland_object.h
index 5f486509ff5838fcb4e8df782c0213695dd9c241..1be7773a1f35fb53cf6f2c9fb82056040dc485c7 100644
--- a/ui/ozone/platform/wayland/common/wayland_object.h
+++ b/ui/ozone/platform/wayland/common/wayland_object.h
@@ -105,6 +105,7 @@ bool CanBind(const std::string& interface,
 // For convenience, keep aphabetical order in this list.
 DECLARE_WAYLAND_OBJECT_TRAITS(augmented_surface)
 DECLARE_WAYLAND_OBJECT_TRAITS(augmented_sub_surface)
+DECLARE_WAYLAND_OBJECT_TRAITS(bs_z_order_v1)
 DECLARE_WAYLAND_OBJECT_TRAITS(gtk_primary_selection_device)
 DECLARE_WAYLAND_OBJECT_TRAITS(gtk_primary_selection_device_manager)
 DECLARE_WAYLAND_OBJECT_TRAITS(gtk_primary_selection_offer)
diff --git a/ui/ozone/platform/wayland/host/wayland_connection.cc b/ui/ozone/platform/wayland/host/wayland_connection.cc
index 556240c00925dc96645fc328fd8f4f210dd3a1ad..15f33d660c278e0ae5d61475d635288becaff3e3 100644
--- a/ui/ozone/platform/wayland/host/wayland_connection.cc
+++ b/ui/ozone/platform/wayland/host/wayland_connection.cc
@@ -8,6 +8,7 @@
 #include <extended-drag-unstable-v1-client-protocol.h>
 #include <presentation-time-client-protocol.h>
 #include <xdg-shell-client-protocol.h>
+#include <bs-z-order-unstable-v1-client-protocol.h>
 
 #include <algorithm>
 #include <cstdint>
@@ -70,6 +71,7 @@ namespace {
 // The maximum supported versions for a given interface.
 // The version bound will be the minimum of the value and the version
 // advertised by the server.
+constexpr uint32_t kMaxBsZOrderVersion = 1;
 constexpr uint32_t kMaxCompositorVersion = 4;
 constexpr uint32_t kMaxKeyboardExtensionVersion = 2;
 constexpr uint32_t kMaxXdgShellVersion = 5;
@@ -396,6 +398,14 @@ void WaylandConnection::Global(void* data,
   auto factory_it = connection->global_object_factories_.find(interface);
   if (factory_it != connection->global_object_factories_.end()) {
     (*factory_it->second)(connection, registry, name, interface, version);
+  } else if (!connection->bs_z_order_v1_ &&
+             strcmp(interface, "bs_z_order_v1") == 0) {
+    connection->bs_z_order_v1_ = wl::Bind<bs_z_order_v1>(
+        registry, name, std::min(version, kMaxBsZOrderVersion));
+    if (!connection->bs_z_order_v1_) {
+      LOG(ERROR) << "Failed to bind to bs_z_order_v1 global";
+      return;
+    }
   } else if (!connection->compositor_ &&
              strcmp(interface, "wl_compositor") == 0) {
     connection->compositor_ = wl::Bind<wl_compositor>(
diff --git a/ui/ozone/platform/wayland/host/wayland_connection.h b/ui/ozone/platform/wayland/host/wayland_connection.h
index 73080d1ca13e1ffa903fe9f2b7f6ebdc47216b04..07ea6ba8ec3a02b4d0b183dc5e8cc21c66b55fa4 100644
--- a/ui/ozone/platform/wayland/host/wayland_connection.h
+++ b/ui/ozone/platform/wayland/host/wayland_connection.h
@@ -104,6 +104,8 @@ class WaylandConnection {
   // error. Called by WaylandEventWatcher.
   void SetShutdownCb(base::OnceCallback<void()> shutdown_cb);
 
+  bs_z_order_v1* bs_z_order() const { return bs_z_order_v1_.get(); }
+
   // A correct display must be chosen when creating objects or calling
   // roundrips.  That is, all the methods that deal with polling, pulling event
   // queues, etc, must use original display. All the other methods that create
@@ -364,6 +366,7 @@ class WaylandConnection {
   base::flat_map<std::string, wl::GlobalObjectFactory> global_object_factories_;
 
   uint32_t compositor_version_ = 0;
+  wl::Object<bs_z_order_v1> bs_z_order_v1_;
   wl::Object<wl_display> display_;
   wl::Object<wl_proxy> wrapped_display_;
   wl::Object<wl_event_queue> event_queue_;
diff --git a/ui/ozone/platform/wayland/host/xdg_toplevel_wrapper_impl.cc b/ui/ozone/platform/wayland/host/xdg_toplevel_wrapper_impl.cc
index 6234df61b0786be1388c27ae2e6e5eb06bec7610..d80cb43540b87b54406578b2e0ee9333ca79eca2 100644
--- a/ui/ozone/platform/wayland/host/xdg_toplevel_wrapper_impl.cc
+++ b/ui/ozone/platform/wayland/host/xdg_toplevel_wrapper_impl.cc
@@ -6,6 +6,7 @@
 
 #include <aura-shell-client-protocol.h>
 #include <xdg-decoration-unstable-v1-client-protocol.h>
+#include <bs-z-order-unstable-v1-client-protocol.h>
 
 #include "base/logging.h"
 #include "base/notreached.h"
@@ -501,6 +502,10 @@ void XDGToplevelWrapperImpl::SetZOrder(ZOrderLevel z_order) {
     zaura_toplevel_set_z_order(aura_toplevel_.get(),
                                ToZauraToplevelZOrderLevel(z_order));
   }
+  else if (!aura_toplevel_ && connection_->bs_z_order()) {
+    // The z-index we get if we are using xdg on a BS device is an absolute value.
+    bs_z_order_v1_set_z_index(connection_->bs_z_order(), wayland_window_->root_surface()->surface(), (int)z_order);
+  }
 }
 
 bool XDGToplevelWrapperImpl::SupportsActivation() {
